<div class="card">
  <div class="logo">
    <img src="/images/logo.png" alt="SafeBallot Logo">
  </div>
  
  <h1>Get Started</h1>
  <h2>Welcome to SafeBallot - Let's create your account</h2>
  
  <hr class="divider">
  
  <form id="register-form" action="/api/register" method="POST">
    <div class="form-group">
      <label for="email">Email</label>
      <input type="email" id="email" name="email" placeholder="email@email.com" required>
    </div>
    
    <div class="form-group">
      <label for="password">Password</label>
      <div class="password-field">
        <input type="password" id="password" name="password" placeholder="password" required>
        <span class="password-toggle">👁️‍🗨️</span>
      </div>
    </div>
    
    <button type="submit">Sign up</button>
  </form>
  
  <div class="form-footer">
    Already have an account? <a href="/login">Log In</a>
  </div>
</div>

<script>
  document.getElementById('register-form').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const email = document.getElementById('email').value;
    const password = document.getElementById('password').value;
    
    // Show some feedback to user
    const submitButton = this.querySelector('button[type="submit"]');
    const originalText = submitButton.textContent;
    submitButton.textContent = 'Signing up...';
    submitButton.disabled = true;
    
    fetch('/api/register', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ email, password })
    })
    .then(response => {
      // Log the raw response for debugging
      console.log('Response status:', response.status);
      
      // Check if response is ok before parsing JSON
      if (!response.ok) {
        throw new Error(`Server responded with status: ${response.status}`);
      }
      
      return response.json();
    })
    .then(data => {
      console.log('Registration response:', data);
      
      if (data && data.success) {
        // Store user role from server response
        const userRole = data.data && data.data.role ? data.data.role : 'voter';
        localStorage.setItem('userRole', userRole);
        
        // Verification is the same for both flows
        window.location.href = '/verify';
      } else {
        // Handle server-side validation errors
        const errorMessage = data && data.message ? data.message : 'Registration failed';
        alert(errorMessage);
        
        // Reset button
        submitButton.textContent = originalText;
        submitButton.disabled = false;
      }
    })
    .catch(error => {
      console.error('Registration error details:', error);
      alert('An error occurred during registration. Please try again.');
      
      // Reset button
      submitButton.textContent = originalText;
      submitButton.disabled = false;
    });
  });
</script> 