<div class="verify-id-container">
  <div class="back-button">
    <a href="/verify">←</a>
  </div>
  
  <div class="id-scan-content">
    <h1>trueID™</h1>
    <p>Place the front of your ID into the camera.</p>
    
    <div class="camera-container">
      <video id="camera-feed" autoplay playsinline></video>
      <div class="scanner-overlay">
        <div class="corner top-left"></div>
        <div class="corner top-right"></div>
        <div class="corner bottom-left"></div>
        <div class="corner bottom-right"></div>
      </div>
      <div id="scanning-indicator">
        <div class="scanner-status">
          <div class="pulse-dot"></div>
          <span id="status-text">Scanning...</span>
        </div>
      </div>
    </div>
    
    <div id="camera-controls">
      <button id="verify-btn" disabled>Verify</button>
      <button id="retry-btn" class="hidden">Try Again</button>
    </div>
    
    <div id="error-message" class="hidden">
      <p>Camera access was denied. Please enable camera access in your browser settings to continue.</p>
      <button id="request-permission-btn">Request Camera Access</button>
    </div>
  </div>
</div>

<script>
  // Camera elements
  const cameraFeed = document.getElementById('camera-feed');
  const verifyBtn = document.getElementById('verify-btn');
  const retryBtn = document.getElementById('retry-btn');
  const errorMessage = document.getElementById('error-message');
  const requestPermissionBtn = document.getElementById('request-permission-btn');
  const statusText = document.getElementById('status-text');
  
  // Stream reference
  let mediaStream = null;
  
  // Start camera when page loads
  document.addEventListener('DOMContentLoaded', startCamera);
  
  // Camera initialization
  function startCamera() {
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
      showError('Camera API not supported in your browser');
      return;
    }
    
    // Request camera with high resolution if available
    navigator.mediaDevices.getUserMedia({
      video: {
        width: { ideal: 1920 },
        height: { ideal: 1080 },
        facingMode: 'environment' // Use back camera on mobile devices
      }
    })
    .then(stream => {
      mediaStream = stream;
      cameraFeed.srcObject = stream;
      
      // Simulate ID detection (in a real app, this would use computer vision)
      setTimeout(() => {
        statusText.textContent = 'ID Detected';
        verifyBtn.disabled = false;
        document.querySelector('.scanner-overlay').classList.add('detected');
      }, 3000);
    })
    .catch(error => {
      console.error('Camera access error:', error);
      if (error.name === 'NotAllowedError') {
        errorMessage.classList.remove('hidden');
      } else {
        showError('Could not access camera: ' + error.message);
      }
    });
  }
  
  // Show error message
  function showError(message) {
    statusText.textContent = message;
    statusText.classList.add('error');
  }
  
  // Request permission again
  requestPermissionBtn.addEventListener('click', () => {
    errorMessage.classList.add('hidden');
    startCamera();
  });
  
  // Capture ID
  verifyBtn.addEventListener('click', function() {
    // In a real app, you would capture the frame and process it
    statusText.textContent = 'ID Captured';
    
    // Create a canvas to capture the current video frame
    const canvas = document.createElement('canvas');
    canvas.width = cameraFeed.videoWidth;
    canvas.height = cameraFeed.videoHeight;
    const ctx = canvas.getContext('2d');
    ctx.drawImage(cameraFeed, 0, 0, canvas.width, canvas.height);
    
    // Convert to base64 - in a real app you would send this to your server
    const imageData = canvas.toDataURL('image/jpeg');
    
    // Store the captured image data in localStorage (for demo purposes)
    localStorage.setItem('capturedID', imageData);
    
    // Stop the camera stream
    if (mediaStream) {
      mediaStream.getTracks().forEach(track => track.stop());
    }
    
    // Redirect to confirm page
    window.location.href = '/verify/confirm';
  });
  
  // Retry scanning
  retryBtn.addEventListener('click', () => {
    retryBtn.classList.add('hidden');
    verifyBtn.classList.remove('hidden');
    startCamera();
  });
</script>

<style>
  .verify-id-container {
    display: flex;
    min-height: 100vh;
    width: 100%;
  }
  
  .id-scan-content {
    width: 50%;
    padding: 40px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: white;
    margin-left: auto;
  }
  
  .back-button {
    position: absolute;
    top: 20px;
    left: 20px;
  }
  
  .back-button a {
    text-decoration: none;
    color: var(--primary-color);
    font-size: 24px;
    font-weight: bold;
  }
  
  .camera-container {
    position: relative;
    width: 100%;
    height: 400px;
    margin: 30px 0;
    overflow: hidden;
    border-radius: 10px;
    background-color: #000;
  }
  
  #camera-feed {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .scanner-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    box-sizing: border-box;
    pointer-events: none;
    transition: border-color 0.3s;
  }
  
  .scanner-overlay.detected {
    border: 2px solid #4CAF50;
  }
  
  .corner {
    position: absolute;
    width: 30px;
    height: 30px;
    border-color: rgba(255, 255, 255, 0.8);
  }
  
  .top-left {
    top: 20px;
    left: 20px;
    border-top: 3px solid;
    border-left: 3px solid;
  }
  
  .top-right {
    top: 20px;
    right: 20px;
    border-top: 3px solid;
    border-right: 3px solid;
  }
  
  .bottom-left {
    bottom: 20px;
    left: 20px;
    border-bottom: 3px solid;
    border-left: 3px solid;
  }
  
  .bottom-right {
    bottom: 20px;
    right: 20px;
    border-bottom: 3px solid;
    border-right: 3px solid;
  }
  
  #scanning-indicator {
    position: absolute;
    bottom: 20px;
    left: 0;
    width: 100%;
    display: flex;
    justify-content: center;
  }
  
  .scanner-status {
    display: flex;
    align-items: center;
    background-color: rgba(0, 0, 0, 0.6);
    color: white;
    padding: 8px 15px;
    border-radius: 20px;
  }
  
  .pulse-dot {
    width: 12px;
    height: 12px;
    background-color: #4CAF50;
    border-radius: 50%;
    margin-right: 10px;
    animation: pulse 1.5s infinite;
  }
  
  @keyframes pulse {
    0% {
      opacity: 1;
    }
    50% {
      opacity: 0.3;
    }
    100% {
      opacity: 1;
    }
  }
  
  #camera-controls {
    display: flex;
    gap: 15px;
    width: 100%;
    justify-content: center;
  }
  
  #verify-btn, #retry-btn {
    background-color: var(--accent-color);
    color: white;
    border: none;
    border-radius: 6px;
    padding: 12px 20px;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    min-width: 150px;
    transition: background-color 0.3s;
  }
  
  #verify-btn:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
  }
  
  #verify-btn:not(:disabled):hover, #retry-btn:hover {
    background-color: var(--primary-color);
  }
  
  #error-message {
    background-color: #ffebee;
    border-left: 4px solid #f44336;
    padding: 15px;
    margin: 20px 0;
    border-radius: 4px;
    width: 100%;
    text-align: center;
  }
  
  #request-permission-btn {
    background-color: #f44336;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 8px 15px;
    margin-top: 10px;
    cursor: pointer;
  }
  
  .hidden {
    display: none !important;
  }
  
  .error {
    color: #f44336 !important;
  }
</style> 