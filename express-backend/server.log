MongoDB connection URL: mongodb+srv://gedeon:****@otp-cluster.izcylhb.mongodb.net/?retryWrites=true&w=majority&appName=otp-cluster
MongoDB database name: safeballot
(node:72256) [MONGOOSE] Warning: Duplicate schema index on {"email":1} found. This is often due to declaring an index using both "index: true" and "schema.index()". Please remove the duplicate index definition.
(Use `node --trace-warnings ...` to show where the warning was created)
(node:72256) [MONGOOSE] Warning: Duplicate schema index on {"userId":1} found. This is often due to declaring an index using both "index: true" and "schema.index()". Please remove the duplicate index definition.
(node:72256) [MONGOOSE] Warning: Duplicate schema index on {"createdAt":1} found. This is often due to declaring an index using both "index: true" and "schema.index()". Please remove the duplicate index definition.
Executing (default): SELECT 1+1 AS result
Successfully connected to the database
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_role' GROUP BY 1
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'users' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'safeballot'
Executing (default): ALTER TABLE "users" ALTER COLUMN "name" SET NOT NULL;ALTER TABLE "users" ALTER COLUMN "name" DROP DEFAULT;ALTER TABLE "users" ALTER COLUMN "name" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "users" ALTER COLUMN "email" SET NOT NULL;ALTER TABLE "users" ALTER COLUMN "email" DROP DEFAULT;ALTER TABLE "users"  ADD UNIQUE ("email");ALTER TABLE "users" ALTER COLUMN "email" TYPE VARCHAR(255)  ;
Executing (default): ALTER TABLE "users" ALTER COLUMN "password" SET NOT NULL;ALTER TABLE "users" ALTER COLUMN "password" DROP DEFAULT;ALTER TABLE "users" ALTER COLUMN "password" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "users" ALTER COLUMN "role" DROP NOT NULL;ALTER TABLE "users" ALTER COLUMN "role" SET DEFAULT 'user';DO 'BEGIN CREATE TYPE "public"."enum_users_role" AS ENUM(''admin'', ''user''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE "users" ALTER COLUMN "role" TYPE "public"."enum_users_role" USING ("role"::"public"."enum_users_role");
Executing (default): ALTER TABLE "users" ALTER COLUMN "isVerified" DROP NOT NULL;ALTER TABLE "users" ALTER COLUMN "isVerified" SET DEFAULT false;ALTER TABLE "users" ALTER COLUMN "isVerified" TYPE BOOLEAN;
Executing (default): ALTER TABLE "users" ALTER COLUMN "profilePicture" DROP NOT NULL;ALTER TABLE "users" ALTER COLUMN "profilePicture" DROP DEFAULT;ALTER TABLE "users" ALTER COLUMN "profilePicture" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "users" ALTER COLUMN "refreshToken" DROP NOT NULL;ALTER TABLE "users" ALTER COLUMN "refreshToken" DROP DEFAULT;ALTER TABLE "users" ALTER COLUMN "refreshToken" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "users" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "users" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "users" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "users" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "users" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "users" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'ballots'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_ballots_status' GROUP BY 1
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_ballots_verificationMethod' GROUP BY 1
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'ballots' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'ballots' AND tc.table_catalog = 'safeballot'
Executing (default): ALTER TABLE "ballots" ALTER COLUMN "title" SET NOT NULL;ALTER TABLE "ballots" ALTER COLUMN "title" DROP DEFAULT;ALTER TABLE "ballots" ALTER COLUMN "title" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "ballots" ALTER COLUMN "description" DROP NOT NULL;ALTER TABLE "ballots" ALTER COLUMN "description" DROP DEFAULT;ALTER TABLE "ballots" ALTER COLUMN "description" TYPE TEXT;
Executing (default): ALTER TABLE "ballots" ALTER COLUMN "status" DROP NOT NULL;ALTER TABLE "ballots" ALTER COLUMN "status" SET DEFAULT 'draft';DO 'BEGIN CREATE TYPE "public"."enum_ballots_status" AS ENUM(''draft'', ''scheduled'', ''active'', ''completed''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE "ballots" ALTER COLUMN "status" TYPE "public"."enum_ballots_status" USING ("status"::"public"."enum_ballots_status");
Executing (default): ALTER TABLE "ballots" ALTER COLUMN "startDate" DROP NOT NULL;ALTER TABLE "ballots" ALTER COLUMN "startDate" DROP DEFAULT;ALTER TABLE "ballots" ALTER COLUMN "startDate" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "ballots" ALTER COLUMN "endDate" DROP NOT NULL;ALTER TABLE "ballots" ALTER COLUMN "endDate" DROP DEFAULT;ALTER TABLE "ballots" ALTER COLUMN "endDate" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "ballots" ALTER COLUMN "isPublic" DROP NOT NULL;ALTER TABLE "ballots" ALTER COLUMN "isPublic" SET DEFAULT false;ALTER TABLE "ballots" ALTER COLUMN "isPublic" TYPE BOOLEAN;
Executing (default): ALTER TABLE "ballots" ALTER COLUMN "requiresVerification" DROP NOT NULL;ALTER TABLE "ballots" ALTER COLUMN "requiresVerification" SET DEFAULT false;ALTER TABLE "ballots" ALTER COLUMN "requiresVerification" TYPE BOOLEAN;
Executing (default): ALTER TABLE "ballots" ALTER COLUMN "verificationMethod" DROP NOT NULL;ALTER TABLE "ballots" ALTER COLUMN "verificationMethod" SET DEFAULT 'email';DO 'BEGIN CREATE TYPE "public"."enum_ballots_verificationMethod" AS ENUM(''email'', ''sms'', ''id_document'', ''digital_key''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE "ballots" ALTER COLUMN "verificationMethod" TYPE "public"."enum_ballots_verificationMethod" USING ("verificationMethod"::"public"."enum_ballots_verificationMethod");
Executing (default): ALTER TABLE "ballots" DROP CONSTRAINT "ballots_createdBy_fkey"
Executing (default): ALTER TABLE "ballots"  ADD FOREIGN KEY ("createdBy") REFERENCES "users" ("id") ON DELETE NO ACTION ON UPDATE CASCADE;
Executing (default): ALTER TABLE "ballots" ALTER COLUMN "totalVoters" DROP NOT NULL;ALTER TABLE "ballots" ALTER COLUMN "totalVoters" SET DEFAULT 0;ALTER TABLE "ballots" ALTER COLUMN "totalVoters" TYPE INTEGER ; COMMENT ON COLUMN "ballots"."totalVoters" IS 'Number of voters who have registered';
Executing (default): ALTER TABLE "ballots" ALTER COLUMN "ballotsReceived" DROP NOT NULL;ALTER TABLE "ballots" ALTER COLUMN "ballotsReceived" SET DEFAULT 0;ALTER TABLE "ballots" ALTER COLUMN "ballotsReceived" TYPE INTEGER ; COMMENT ON COLUMN "ballots"."ballotsReceived" IS 'Number of completed votes received';
Executing (default): ALTER TABLE "ballots" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "ballots" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "ballots" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "ballots" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "ballots" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "ballots" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "ballots" ALTER COLUMN "allowedVoters" DROP NOT NULL;ALTER TABLE "ballots" ALTER COLUMN "allowedVoters" SET DEFAULT 0;ALTER TABLE "ballots" ALTER COLUMN "allowedVoters" TYPE INTEGER ; COMMENT ON COLUMN "ballots"."allowedVoters" IS 'Number of voters allowed to register, as set by admin during creation';
Executing (default): ALTER TABLE "ballots" ALTER COLUMN "requiresAuthentication" DROP NOT NULL;ALTER TABLE "ballots" ALTER COLUMN "requiresAuthentication" SET DEFAULT false;ALTER TABLE "ballots" ALTER COLUMN "requiresAuthentication" TYPE BOOLEAN;
Executing (default): ALTER TABLE "ballots" ALTER COLUMN "accessKey" DROP NOT NULL;ALTER TABLE "ballots" ALTER COLUMN "accessKey" DROP DEFAULT;ALTER TABLE "ballots"  ADD UNIQUE ("accessKey");ALTER TABLE "ballots" ALTER COLUMN "accessKey" TYPE VARCHAR(255) ;
Executing (default): ALTER TABLE "ballots" ALTER COLUMN "keyUsageCount" DROP NOT NULL;ALTER TABLE "ballots" ALTER COLUMN "keyUsageCount" SET DEFAULT 0;ALTER TABLE "ballots" ALTER COLUMN "keyUsageCount" TYPE INTEGER;
Executing (default): ALTER TABLE "ballots" ALTER COLUMN "maxKeyUsage" DROP NOT NULL;ALTER TABLE "ballots" ALTER COLUMN "maxKeyUsage" DROP DEFAULT;ALTER TABLE "ballots" ALTER COLUMN "maxKeyUsage" TYPE INTEGER;
Executing (default): ALTER TABLE "ballots" ALTER COLUMN "accessKeyEnabled" DROP NOT NULL;ALTER TABLE "ballots" ALTER COLUMN "accessKeyEnabled" SET DEFAULT true;ALTER TABLE "ballots" ALTER COLUMN "accessKeyEnabled" TYPE BOOLEAN;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'ballots' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'questions'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_questions_questionType' GROUP BY 1
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'questions' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'questions' AND tc.table_catalog = 'safeballot'
Executing (default): ALTER TABLE "questions" ALTER COLUMN "title" SET NOT NULL;ALTER TABLE "questions" ALTER COLUMN "title" DROP DEFAULT;ALTER TABLE "questions" ALTER COLUMN "title" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "questions" ALTER COLUMN "description" DROP NOT NULL;ALTER TABLE "questions" ALTER COLUMN "description" DROP DEFAULT;ALTER TABLE "questions" ALTER COLUMN "description" TYPE TEXT;
Executing (default): ALTER TABLE "questions" ALTER COLUMN "questionType" DROP NOT NULL;ALTER TABLE "questions" ALTER COLUMN "questionType" SET DEFAULT 'single_choice';DO 'BEGIN CREATE TYPE "public"."enum_questions_questionType" AS ENUM(''single_choice'', ''multiple_choice'', ''rank_choice''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE "questions" ALTER COLUMN "questionType" TYPE "public"."enum_questions_questionType" USING ("questionType"::"public"."enum_questions_questionType");
Executing (default): ALTER TABLE "questions" ALTER COLUMN "maxSelections" DROP NOT NULL;ALTER TABLE "questions" ALTER COLUMN "maxSelections" SET DEFAULT 1;ALTER TABLE "questions" ALTER COLUMN "maxSelections" TYPE INTEGER;
Executing (default): ALTER TABLE "questions" ALTER COLUMN "order" DROP NOT NULL;ALTER TABLE "questions" ALTER COLUMN "order" SET DEFAULT 0;ALTER TABLE "questions" ALTER COLUMN "order" TYPE INTEGER;
Executing (default): ALTER TABLE "questions" DROP CONSTRAINT "questions_ballotId_fkey"
Executing (default): ALTER TABLE "questions"  ADD FOREIGN KEY ("ballotId") REFERENCES "ballots" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): ALTER TABLE "questions" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "questions" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "questions" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "questions" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "questions" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "questions" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'questions' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'choices'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'choices' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'choices' AND tc.table_catalog = 'safeballot'
Executing (default): ALTER TABLE "choices" ALTER COLUMN "text" SET NOT NULL;ALTER TABLE "choices" ALTER COLUMN "text" DROP DEFAULT;ALTER TABLE "choices" ALTER COLUMN "text" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "choices" ALTER COLUMN "description" DROP NOT NULL;ALTER TABLE "choices" ALTER COLUMN "description" DROP DEFAULT;ALTER TABLE "choices" ALTER COLUMN "description" TYPE TEXT;
Executing (default): ALTER TABLE "choices" ALTER COLUMN "image" DROP NOT NULL;ALTER TABLE "choices" ALTER COLUMN "image" DROP DEFAULT;ALTER TABLE "choices" ALTER COLUMN "image" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "choices" ALTER COLUMN "order" DROP NOT NULL;ALTER TABLE "choices" ALTER COLUMN "order" SET DEFAULT 0;ALTER TABLE "choices" ALTER COLUMN "order" TYPE INTEGER;
Executing (default): ALTER TABLE "choices" DROP CONSTRAINT "choices_questionId_fkey"
Executing (default): ALTER TABLE "choices"  ADD FOREIGN KEY ("questionId") REFERENCES "questions" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): ALTER TABLE "choices" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "choices" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "choices" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "choices" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "choices" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "choices" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'choices' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'voters'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'voters' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'voters' AND tc.table_catalog = 'safeballot'
Executing (default): ALTER TABLE "voters" ALTER COLUMN "email" SET NOT NULL;ALTER TABLE "voters" ALTER COLUMN "email" DROP DEFAULT;ALTER TABLE "voters"  ADD UNIQUE ("email");ALTER TABLE "voters" ALTER COLUMN "email" TYPE VARCHAR(255)  ;
Executing (default): ALTER TABLE "voters" ALTER COLUMN "name" DROP NOT NULL;ALTER TABLE "voters" ALTER COLUMN "name" DROP DEFAULT;ALTER TABLE "voters" ALTER COLUMN "name" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "voters" ALTER COLUMN "hasVoted" DROP NOT NULL;ALTER TABLE "voters" ALTER COLUMN "hasVoted" SET DEFAULT false;ALTER TABLE "voters" ALTER COLUMN "hasVoted" TYPE BOOLEAN;
Executing (default): ALTER TABLE "voters" ALTER COLUMN "verificationCode" DROP NOT NULL;ALTER TABLE "voters" ALTER COLUMN "verificationCode" DROP DEFAULT;ALTER TABLE "voters" ALTER COLUMN "verificationCode" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "voters" ALTER COLUMN "isVerified" DROP NOT NULL;ALTER TABLE "voters" ALTER COLUMN "isVerified" SET DEFAULT false;ALTER TABLE "voters" ALTER COLUMN "isVerified" TYPE BOOLEAN;
Executing (default): ALTER TABLE "voters" DROP CONSTRAINT "voters_ballotId_fkey"
Executing (default): ALTER TABLE "voters"  ADD FOREIGN KEY ("ballotId") REFERENCES "ballots" ("id");
Executing (default): ALTER TABLE "voters" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "voters" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "voters" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "voters" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "voters" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "voters" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "voters" ALTER COLUMN "firstName" SET NOT NULL;ALTER TABLE "voters" ALTER COLUMN "firstName" DROP DEFAULT;ALTER TABLE "voters" ALTER COLUMN "firstName" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "voters" ALTER COLUMN "lastName" SET NOT NULL;ALTER TABLE "voters" ALTER COLUMN "lastName" DROP DEFAULT;ALTER TABLE "voters" ALTER COLUMN "lastName" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "voters" ALTER COLUMN "dateOfBirth" DROP NOT NULL;ALTER TABLE "voters" ALTER COLUMN "dateOfBirth" DROP DEFAULT;ALTER TABLE "voters" ALTER COLUMN "dateOfBirth" TYPE DATE;
Executing (default): ALTER TABLE "voters" ALTER COLUMN "address" DROP NOT NULL;ALTER TABLE "voters" ALTER COLUMN "address" DROP DEFAULT;ALTER TABLE "voters" ALTER COLUMN "address" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "voters" ALTER COLUMN "city" DROP NOT NULL;ALTER TABLE "voters" ALTER COLUMN "city" DROP DEFAULT;ALTER TABLE "voters" ALTER COLUMN "city" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "voters" ALTER COLUMN "state" DROP NOT NULL;ALTER TABLE "voters" ALTER COLUMN "state" DROP DEFAULT;ALTER TABLE "voters" ALTER COLUMN "state" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "voters" ALTER COLUMN "zipCode" DROP NOT NULL;ALTER TABLE "voters" ALTER COLUMN "zipCode" DROP DEFAULT;ALTER TABLE "voters" ALTER COLUMN "zipCode" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "voters" ALTER COLUMN "ssn" DROP NOT NULL;ALTER TABLE "voters" ALTER COLUMN "ssn" DROP DEFAULT;ALTER TABLE "voters" ALTER COLUMN "ssn" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "voters" ALTER COLUMN "phone" DROP NOT NULL;ALTER TABLE "voters" ALTER COLUMN "phone" DROP DEFAULT;ALTER TABLE "voters" ALTER COLUMN "phone" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "voters" ALTER COLUMN "verificationToken" DROP NOT NULL;ALTER TABLE "voters" ALTER COLUMN "verificationToken" DROP DEFAULT;ALTER TABLE "voters" ALTER COLUMN "verificationToken" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "voters" ALTER COLUMN "verificationTokenExpires" DROP NOT NULL;ALTER TABLE "voters" ALTER COLUMN "verificationTokenExpires" DROP DEFAULT;ALTER TABLE "voters" ALTER COLUMN "verificationTokenExpires" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "voters" ALTER COLUMN "registrationDate" DROP NOT NULL;ALTER TABLE "voters" ALTER COLUMN "registrationDate" DROP DEFAULT;ALTER TABLE "voters" ALTER COLUMN "registrationDate" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "voters" ALTER COLUMN "voterId" DROP NOT NULL;ALTER TABLE "voters" ALTER COLUMN "voterId" DROP DEFAULT;ALTER TABLE "voters"  ADD UNIQUE ("voterId");ALTER TABLE "voters" ALTER COLUMN "voterId" TYPE VARCHAR(255) ;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'voters' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'votes'
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'votes' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'votes' AND tc.table_catalog = 'safeballot'
Executing (default): ALTER TABLE "votes" DROP CONSTRAINT "votes_voterId_fkey"
Executing (default): ALTER TABLE "votes"  ADD FOREIGN KEY ("voterId") REFERENCES "voters" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): ALTER TABLE "votes" DROP CONSTRAINT "votes_ballotId_fkey"
Executing (default): ALTER TABLE "votes"  ADD FOREIGN KEY ("ballotId") REFERENCES "ballots" ("id") ON DELETE NO ACTION ON UPDATE CASCADE;
Executing (default): ALTER TABLE "votes" DROP CONSTRAINT "votes_questionId_fkey"
Executing (default): ALTER TABLE "votes"  ADD FOREIGN KEY ("questionId") REFERENCES "questions" ("id") ON DELETE NO ACTION ON UPDATE CASCADE;
Executing (default): ALTER TABLE "votes" DROP CONSTRAINT "votes_choiceId_fkey"
Executing (default): ALTER TABLE "votes"  ADD FOREIGN KEY ("choiceId") REFERENCES "choices" ("id") ON DELETE CASCADE ON UPDATE CASCADE;
Executing (default): ALTER TABLE "votes" ALTER COLUMN "rank" DROP NOT NULL;ALTER TABLE "votes" ALTER COLUMN "rank" DROP DEFAULT;ALTER TABLE "votes" ALTER COLUMN "rank" TYPE INTEGER;
Executing (default): ALTER TABLE "votes" ALTER COLUMN "voteTimestamp" DROP NOT NULL;ALTER TABLE "votes" ALTER COLUMN "voteTimestamp" DROP DEFAULT;ALTER TABLE "votes" ALTER COLUMN "voteTimestamp" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "votes" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "votes" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "votes" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "votes" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "votes" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "votes" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "votes" ALTER COLUMN "castAt" DROP NOT NULL;ALTER TABLE "votes" ALTER COLUMN "castAt" DROP DEFAULT;ALTER TABLE "votes" ALTER COLUMN "castAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'votes' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Database migrations completed
Attempting to connect to MongoDB for OTP functionality...
Attempting to connect to MongoDB using native driver...
Connected to MongoDB successfully!
Connecting Mongoose to MongoDB...
(node:72256) [MONGODB DRIVER] Warning: useNewUrlParser is a deprecated option: useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version
(node:72256) [MONGODB DRIVER] Warning: useUnifiedTopology is a deprecated option: useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version
Mongoose connected successfully!
✅ MongoDB connected successfully for OTP functionality
Initializing email transporter...
🔧 Initializing email transporter with:
   Host: smtp.gmail.com
   Port: 587
   User: gedeonbaende1234@gmail.com
   Pass: [CONFIGURED]
✅ Email transporter verified successfully!
📧 Email transporter configured with host: smtp.gmail.com
SafeBallot API server running at http://localhost:8080
[0mGET /api/health [32m200[0m 2.912 ms - 50[0m
